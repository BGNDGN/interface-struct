// Code generated by MockGen. DO NOT EDIT.
// Source: internal/device.go

// Package mocks is a generated GoMock package.
package internal

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDevice is a mock of Device interface.
type MockDevice struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceMockRecorder
}

// MockDeviceMockRecorder is the mock recorder for MockDevice.
type MockDeviceMockRecorder struct {
	mock *MockDevice
}

// NewMockDevice creates a new mock instance.
func NewMockDevice(ctrl *gomock.Controller) *MockDevice {
	mock := &MockDevice{ctrl: ctrl}
	mock.recorder = &MockDeviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDevice) EXPECT() *MockDeviceMockRecorder {
	return m.recorder
}

// Gelis mocks base method.
func (m *MockDevice) Gelis() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Gelis")
}

// Gelis indicates an expected call of Gelis.
func (mr *MockDeviceMockRecorder) Gelis() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gelis", reflect.TypeOf((*MockDevice)(nil).Gelis))
}

// İcerik mocks base method.
func (m *MockDevice) İcerik() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "İcerik")
}

// İcerik indicates an expected call of İcerik.
func (mr *MockDeviceMockRecorder) İcerik() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "İcerik", reflect.TypeOf((*MockDevice)(nil).İcerik))
}
